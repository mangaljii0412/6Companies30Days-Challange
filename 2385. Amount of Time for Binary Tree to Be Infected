class Solution {
public:
    void parentFunc(map<TreeNode*, TreeNode*>& parent, TreeNode* root) {
        stack<TreeNode*> st;
        st.push(root);
        while (!st.empty()) {
            TreeNode* node = st.top();
            st.pop();
            if (node->left) {
                parent[node->left] = node;
                st.push(node->left);
            }
            if (node->right) {
                parent[node->right] = node;
                st.push(node->right);
            }
        }
    }

    void find(TreeNode* &start, TreeNode* root, int s) {
        if (root == NULL) return;
        if (root->val == s) start = root;
        find(start, root->left, s);
        find(start, root->right, s);
    }

    int amountOfTime(TreeNode* root, int s) {
        map<TreeNode*, TreeNode*> parent;
        parentFunc(parent, root);

        TreeNode* start ;
        find(start, root, s);

        stack<pair<TreeNode*, int>> st;
        st.push({start, 0});
        int ans = 0;
        map<int, bool> vis;

        while (!st.empty()) {
            auto it = st.top();
            st.pop();
            TreeNode* node = it.first;
            int dis = it.second;
            vis[node->val] = true;

            ans = max(ans, dis);

            if (node->left && vis.find(node->left->val) == vis.end()) {
                st.push({node->left, dis + 1});
            }
            if (node->right && vis.find(node->right->val) == vis.end()) {
                st.push({node->right, dis + 1});
            }
            if (parent.find(node) != parent.end() && vis.find(parent[node]->val) == vis.end()) {
                st.push({parent[node], dis + 1});
            }
        }
        return ans;
    }
};
